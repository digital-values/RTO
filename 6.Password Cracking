As we've seen, there are numerous ways in which we can obtain credential material for a user - but this is not always in the form of a plaintext password. Instead, it's more common these days to retrieve various hashes. These could be NTLM, NetNTLM, SHA or even Kerberos tickets.

Some hashes such as NTLM can be utilised as they are (e.g. pass the hash), but others are not so useful unless we can crack them to recover an original plaintext password. Regardless of the type of hash, there are generic password cracking methodologies that we'll cover here.

Two very common applications to achieve this are hashcat and John the Ripper.

# Wordlists 

A "wordlist" or "dictionary" attack is the easiest mode of password cracking, in which we simply read in a list of password candidates and try each one line-by-line. There are many popular lists out there, including the venerable rockyou list.  The SecLists repo also have an expansive collection for different applications.

hashcat.exe -a 0 -m 1000 ntlm.txt rockyou.txt

58a478135a93ac3bf058a5ea0e8fdb71:Password123

Where:

    -a 0 specifies the wordlist attack mode.
    -m 1000 specifies that the hash is NTLM.
    ntlm.txt is a text file containing the NTLM hash to crack.
    rockyou.txt is the wordlist.

 
  Use hashcat.exe --help to get a complete list of attack mode and hash types.

 

This cracks practically instantly because 'Password123' is present in the wordlist:

PS C:\> Select-String -Pattern "^Password123$" -Path rockyou.txt -CaseSensitive

rockyou.txt:33523:Password123


Although fast it's not very flexible, since if the password is not in the list, we won't crack it.

# Wordlists + Rules



Rules are a means of extending or manipulating the "base" words in a wordlist in ways that are common habits for users. Such manipulation can include toggling character cases (e.g. a to A), character replacement (e.g. a to @) and prepending/appending characters (e.g. password to password!).  This allows our wordlists to be overall smaller in size (because we don't have to store every permutation), but with the drawback of a slightly slower cracking time.

hashcat.exe -a 0 -m 1000 ntlm.txt rockyou.txt -r rules\add-year.rule

acbfc03df96e93cf7294a01a6abbda33:Summer2020

Where:

    -r rules\add-year.rule is our custom rule file

 

The rockyou list does not contain Summer2020, but it does contain the base word, Summer.

PS C:\> Select-String -Pattern "^Summer2020$" -Path rockyou.txt -CaseSensitive
PS C:\> Select-String -Pattern "^Summer$" -Path rockyou.txt -CaseSensitive

rockyou.txt:16573:Summer


The hashcat wiki contains all the information we need to write a custom rule that will append the year 2020 to each word in rockyou.  We can see that to append a character, we use $X - therefore to append "2020", we just need $2$0$2$0.

PS C:\> cat hashcat\rules\add-year.rule
$2$0$2$0

  Hashcat also ships with lots of rule files in the rules directory that you can use.

# Masks 



A brute-force is where we try all combinations from a given keyspace - for lowercase alphanumeric (of 3 characters), that would mean trying aaa, aab, aacâ€¦ all the way to zzz. This is incredibly time consuming and not all that efficient.

A mask attack is an evolution over the brute-force and allows us to be more selective over the keyspace in certain positions.

A common pattern would be a password that starts with an uppercase, followed by lowercase and ends with a number (e.g. Password1). If we used a brute-force to crack this combination we'd need to use a charset which includes uppers, lowers and numbers (62 chars in total). A password length of 9 is 62^9 (13,537,086,546,263,552) combinations.

My personal desktop computer can crack NTLM at a rate of ~30GH/s (30,000,000,000/s), which would take just over 5 days to complete the keyspace (although it would find the password much before reaching the end).

Hashcat agrees with the calculation:

Time.Started.....: Mon Sep 14 17:35:17 2020 (5 mins, 11 secs)
Time.Estimated...: Sat Sep 19 23:47:27 2020 (5 days, 6 hours)


In contrast, a Mask would allow us to attack this password pattern in a much more efficient way. For instance, instead of using the full keyspace on the first character, we can limit ourselves to uppercase only and likewise with the other positions.

This limits the combinations to 26*26*26*26*26*26*26*26*10 (2,088,270,645,760) which is several thousands times smaller. At the same cracking rate, this will complete in around 1 minute (and in reality, the password will be found near instantly or in several seconds).

That's quite a difference!

hashcat.exe -a 3 -m 1000 C:\Temp\ntlm.txt ?u?l?l?l?l?l?l?l?d

64f12cddaa88057e06a81b54e73b949b:Password1

Where:

    -a 3 specifies the mask attack.
    ?u?l?l?l?l?l?l?l?d is the mask.

 

hashcat --help will show the charsets and are as follows:

? | Charset
===+=========
l | abcdefghijklmnopqrstuvwxyz
u | ABCDEFGHIJKLMNOPQRSTUVWXYZ
d | 0123456789
h | 0123456789abcdef
H | 0123456789ABCDEF
s | !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
a | ?l?u?d?s
b | 0x00 - 0xff


You can combine these charsets within your mask for even more flexibility. It's also common for password to end with a special (such as !) rather than a number, but we can specify both in a mask.

hashcat.exe -a 3 -m 1000 ntlm.txt -1 ?d?s ?u?l?l?l?l?l?l?l?1

fbdcd5041c96ddbd82224270b57f11fc:Password!

Where:

    -1 ?d?s defines a custom charset (digits and specials).
    ?u?l?l?l?l?l?l?l?1 is the mask, where ?1 is the custom charset.

# Mask Length & Mask Files 



By default, this mask attack sets a static password length - ?u?l?l?l?l?l?l?l?1 defines 9 characters, which means we can only crack a 9-character password. To crack passwords of different lengths, we have to manually adjust the mask accordingly.

Hashcat mask files make this process a lot easier for custom masks that you use often.

PS C:\> cat example.hcmask
?d?s,?u?l?l?l?l?1
?d?s,?u?l?l?l?l?l?1
?d?s,?u?l?l?l?l?l?l?1
?d?s,?u?l?l?l?l?l?l?l?1
?d?s,?u?l?l?l?l?l?l?l?l?1

hashcat.exe -a 3 -m 1000 ntlm.txt example.hcmask
hashcat (v6.1.1) starting...

Status...........: Exhausted
Guess.Mask.......: ?u?l?l?l?l?1 [6]

[...snip...]

Guess.Mask.......: ?u?l?l?l?l?l?1 [7]

820be3700dfcfc49e6eb6ef88d765d01:Chimney!


Masks can even have static strings defined, such as a company name or other keyword you suspect are being used in passwords.

ZeroPointSecurity?d
ZeroPointSecurity?d?d
ZeroPointSecurity?d?d?d
ZeroPointSecurity?d?d?d?d

hashcat.exe -a 3 -m 1000 ntlm.txt example2.hcmask

f63ebb17e157149b6dfde5d0cc32803c:ZeroPointSecurity1234

# Combinator 



The combinator attack combines the entries from two dictionaries into single-word candidates. Take the following lists as an example:

PS C:\> cat list1.txt
purple

PS C:\> cat list2.txt
monkey
dishwasher


The combinator will produce "purplemonkey" and "purpledishwasher" as candidates.  You can also apply a rule to each word on the left- or right-hand side using the options -j and -k.  For instance, -j $- and -k $! would produce purple-monkey!.

hashcat.exe -a 1 -m 1000 ntlm.txt list1.txt list2.txt -j $- -k $!

ef81b5ffcbb0d030874022e8fb7e4229:purple-monkey!


  If running in Linux, shells (sh, bash, zsh, fish, etc) will have their own behaviour when the $ character is used on the command line.  They may need to be quoted.

# Hybrid 



Hashcat modes 6 and 7 are hybrid's based on wordlists, masks and the combinator.  You specify both a wordlist and mask on the command line, and the mask is appended or prepended to the words within the list. For example, your dictionary contains the word Password, then -a 6 [...] list.txt ?d?d?d?d will produce Password0000 to Password9999.

hashcat.exe -a 6 -m 1000 ntlm.txt list.txt ?d?d?d?d

be4c5fb0b163f3cc57bd390cdc495bb9:Password5555

Where:

    -a 6 specifies the hybrid wordlist + mask mode.
    ?d?d?d?d is the mask.

 

The hybrid mask + wordlist mode (-a 7) is practically identical, where the mask comes first.

hashcat.exe -a 7 -m 1000 ntlm.txt ?d?d?d?d list.txt

28a3b8f54a6661f15007fca23beccc9c:5555Password

# kwprocessor



There are a number of external utilities that are separate from the main hashcat application. Here we'll review one called kwprocessor.  This is a utility for generating key-walk passwords, which are based on adjacent keys such as qwerty, 1q2w3e4r, 6yHnMjU7 and so on. To humans, these can look rather random and secure (uppers, lowers, numbers & specials), but in reality they're easy to generate programmatically.

kwprocessor has three main components:

    Base characters - the alphabet of the target language.
    Keymaps - the keyboard layout.
    Routes - the directions to walk in.

 

There are several examples provided in the basechars, keymaps and routes directory in the kwprocessor download.

kwp64.exe basechars\custom.base keymaps\uk.keymap routes\2-to-10-max-3-direction-changes.route -o keywalk.txt

PS C:\> Select-String -Pattern "^qwerty$" -Path keywalk.txt -CaseSensitive

D:\Tools\keywalk.txt:759:qwerty
D:\Tools\keywalk.txt:926:qwerty
D:\Tools\keywalk.txt:931:qwerty
D:\Tools\keywalk.txt:943:qwerty
D:\Tools\keywalk.txt:946:qwerty


Some candidates will get generated multiple times, so you'll want to de-dup the list before using it for maximum efficiency.  This wordlist can then be used like any other dictionary in hashcat.
  Use kwp64.exe --help to see customisable options such as toggling the shift key.
